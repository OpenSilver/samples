using System;
using System.Collections.Generic;
using System.Reflection;
using System.Windows;
using System.Windows.Controls;
using System.Linq;
using System.Collections.ObjectModel;
using OSFSample.Support.UI.Units;
using OSFSample.Support.Local.Utils;

namespace OpenSilverShowcase.Buttons
{
    public partial class ButtonShowcase : UserControl
    {
        public ButtonShowcase()
        {
            this.InitializeComponent();
            LoadShowcaseControls();
        }

        private void LoadShowcaseControls()
        {
            var containerPanel = new StackPanel();
            var showcaseTypes = FindShowcaseCardTypes();
            var showcaseCards = new List<ShowcaseCard>();
            var sourceAsm = Assembly.GetExecutingAssembly();

            foreach (var type in showcaseTypes)
            {
                try
                {
                    var instance = (ShowcaseCard)Activator.CreateInstance(type);

                    foreach (var source in instance.CodeSources ?? new ObservableCollection<CodeSource>())
                    {
                        var embeddedPath = EmbeddedUriResolver.ToEmbeddedPath(source.Source);
                        string? codeText = EmbeddedCodeLoader.Load(embeddedPath, sourceAsm);

                        if (!string.IsNullOrWhiteSpace(codeText))
                        {
                            try
                            {
                                source.Code = EmbeddedCodeLoader.ExtractDemoContentOnly(codeText);
                            }
                            catch
                            {
                                source.Code = codeText; // fallback
                            }
                        }
                    }

                    instance.SelectedCodeTab = instance.CodeSources.FirstOrDefault();
                    showcaseCards.Add(instance);
                }
                catch (Exception ex)
                {
                    System.Diagnostics.Debug.WriteLine($"Error creating {type.Name}: {ex.Message}");
                }
            }

            foreach (var card in showcaseCards.OrderBy(c => c.Order))
            {
                containerPanel.Children.Add(card);
            }

            ShowcaseContainer.Content = containerPanel;
        }


        private List<Type> FindShowcaseCardTypes()
        {
            Assembly assembly = Assembly.GetExecutingAssembly();
            string namespaceFilter = "OpenSilverShowcase.Buttons";

            return assembly.GetTypes()
                .Where(t => t.IsClass &&
                           !t.IsAbstract &&
                           t.IsSubclassOf(typeof(ShowcaseCard)) &&
                           t.Namespace != null &&
                           t.Namespace.StartsWith(namespaceFilter))
                .ToList();
        }
    }
}
